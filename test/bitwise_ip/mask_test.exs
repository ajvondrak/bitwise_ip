defmodule BitwiseIp.MaskTest do
  use ExUnit.Case, async: true
  doctest BitwiseIp.Mask
  alias BitwiseIp.Mask

  describe "IPv4" do
    test "encode/1" do
      assert 0b00000000000000000000000000000000 == Mask.encode(:v4, 0)
      assert 0b10000000000000000000000000000000 == Mask.encode(:v4, 1)
      assert 0b11000000000000000000000000000000 == Mask.encode(:v4, 2)
      assert 0b11100000000000000000000000000000 == Mask.encode(:v4, 3)
      assert 0b11110000000000000000000000000000 == Mask.encode(:v4, 4)
      assert 0b11111000000000000000000000000000 == Mask.encode(:v4, 5)
      assert 0b11111100000000000000000000000000 == Mask.encode(:v4, 6)
      assert 0b11111110000000000000000000000000 == Mask.encode(:v4, 7)
      assert 0b11111111000000000000000000000000 == Mask.encode(:v4, 8)
      assert 0b11111111100000000000000000000000 == Mask.encode(:v4, 9)
      assert 0b11111111110000000000000000000000 == Mask.encode(:v4, 10)
      assert 0b11111111111000000000000000000000 == Mask.encode(:v4, 11)
      assert 0b11111111111100000000000000000000 == Mask.encode(:v4, 12)
      assert 0b11111111111110000000000000000000 == Mask.encode(:v4, 13)
      assert 0b11111111111111000000000000000000 == Mask.encode(:v4, 14)
      assert 0b11111111111111100000000000000000 == Mask.encode(:v4, 15)
      assert 0b11111111111111110000000000000000 == Mask.encode(:v4, 16)
      assert 0b11111111111111111000000000000000 == Mask.encode(:v4, 17)
      assert 0b11111111111111111100000000000000 == Mask.encode(:v4, 18)
      assert 0b11111111111111111110000000000000 == Mask.encode(:v4, 19)
      assert 0b11111111111111111111000000000000 == Mask.encode(:v4, 20)
      assert 0b11111111111111111111100000000000 == Mask.encode(:v4, 21)
      assert 0b11111111111111111111110000000000 == Mask.encode(:v4, 22)
      assert 0b11111111111111111111111000000000 == Mask.encode(:v4, 23)
      assert 0b11111111111111111111111100000000 == Mask.encode(:v4, 24)
      assert 0b11111111111111111111111110000000 == Mask.encode(:v4, 25)
      assert 0b11111111111111111111111111000000 == Mask.encode(:v4, 26)
      assert 0b11111111111111111111111111100000 == Mask.encode(:v4, 27)
      assert 0b11111111111111111111111111110000 == Mask.encode(:v4, 28)
      assert 0b11111111111111111111111111111000 == Mask.encode(:v4, 29)
      assert 0b11111111111111111111111111111100 == Mask.encode(:v4, 30)
      assert 0b11111111111111111111111111111110 == Mask.encode(:v4, 31)
      assert 0b11111111111111111111111111111111 == Mask.encode(:v4, 32)
    end

    test "decode/1" do
      for mask <- 0..32 do
        assert Mask.decode(:v4, Mask.encode(:v4, mask)) == mask
      end
    end

    test "parse/1" do
      assert {:ok, 0b00000000000000000000000000000000} = Mask.parse(:v4, "0")
      assert {:ok, 0b11111111111111110000000000000000} = Mask.parse(:v4, "16")
      assert {:ok, 0b11111111111111111111111111111111} = Mask.parse(:v4, "32")

      assert {:error, _} = Mask.parse(:v4, "-1")
      assert {:error, _} = Mask.parse(:v4, "not a mask")
      assert {:error, _} = Mask.parse(:v4, "33")
    end

    test "parse!/1" do
      {:ok, success} = Mask.parse(:v4, "24")
      assert Mask.parse!(:v4, "24") == success

      {:error, error} = Mask.parse(:v4, "error")
      assert_raise ArgumentError, error, fn -> Mask.parse!(:v4, "error") end
    end
  end

  describe "IPv6" do
    test "encode/1" do
      assert 0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 0)
      assert 0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 1)
      assert 0b11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 2)
      assert 0b11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 3)
      assert 0b11110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 4)
      assert 0b11111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 5)
      assert 0b11111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 6)
      assert 0b11111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 7)
      assert 0b11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 8)
      assert 0b11111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 9)
      assert 0b11111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 10)
      assert 0b11111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 11)
      assert 0b11111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 12)
      assert 0b11111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 13)
      assert 0b11111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 14)
      assert 0b11111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 15)
      assert 0b11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 16)
      assert 0b11111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 17)
      assert 0b11111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 18)
      assert 0b11111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 19)
      assert 0b11111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 20)
      assert 0b11111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 21)
      assert 0b11111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 22)
      assert 0b11111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 23)
      assert 0b11111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 24)
      assert 0b11111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 25)
      assert 0b11111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 26)
      assert 0b11111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 27)
      assert 0b11111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 28)
      assert 0b11111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 29)
      assert 0b11111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 30)
      assert 0b11111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 31)
      assert 0b11111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 32)
      assert 0b11111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 33)
      assert 0b11111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 34)
      assert 0b11111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 35)
      assert 0b11111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 36)
      assert 0b11111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 37)
      assert 0b11111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 38)
      assert 0b11111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 39)
      assert 0b11111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 40)
      assert 0b11111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 41)
      assert 0b11111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 42)
      assert 0b11111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 43)
      assert 0b11111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 44)
      assert 0b11111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 45)
      assert 0b11111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 46)
      assert 0b11111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 47)
      assert 0b11111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 48)
      assert 0b11111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 49)
      assert 0b11111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 50)
      assert 0b11111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 51)
      assert 0b11111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 52)
      assert 0b11111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 53)
      assert 0b11111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 54)
      assert 0b11111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 55)
      assert 0b11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 56)
      assert 0b11111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 57)
      assert 0b11111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 58)
      assert 0b11111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 59)
      assert 0b11111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 60)
      assert 0b11111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 61)
      assert 0b11111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 62)
      assert 0b11111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 63)
      assert 0b11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 64)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 65)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 66)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 67)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 68)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 69)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 70)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 71)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 72)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 73)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 74)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 75)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 76)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 77)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 78)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 79)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000 == Mask.encode(:v6, 80)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000 == Mask.encode(:v6, 81)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000 == Mask.encode(:v6, 82)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000 == Mask.encode(:v6, 83)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000 == Mask.encode(:v6, 84)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000 == Mask.encode(:v6, 85)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000 == Mask.encode(:v6, 86)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000 == Mask.encode(:v6, 87)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000 == Mask.encode(:v6, 88)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000 == Mask.encode(:v6, 89)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000 == Mask.encode(:v6, 90)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000 == Mask.encode(:v6, 91)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000 == Mask.encode(:v6, 92)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000 == Mask.encode(:v6, 93)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000 == Mask.encode(:v6, 94)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000 == Mask.encode(:v6, 95)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000 == Mask.encode(:v6, 96)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000 == Mask.encode(:v6, 97)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000 == Mask.encode(:v6, 98)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000 == Mask.encode(:v6, 99)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000 == Mask.encode(:v6, 100)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000 == Mask.encode(:v6, 101)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000 == Mask.encode(:v6, 102)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000 == Mask.encode(:v6, 103)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000 == Mask.encode(:v6, 104)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000 == Mask.encode(:v6, 105)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000 == Mask.encode(:v6, 106)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000 == Mask.encode(:v6, 107)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000 == Mask.encode(:v6, 108)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000 == Mask.encode(:v6, 109)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000 == Mask.encode(:v6, 110)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000 == Mask.encode(:v6, 111)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000 == Mask.encode(:v6, 112)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000 == Mask.encode(:v6, 113)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000 == Mask.encode(:v6, 114)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000 == Mask.encode(:v6, 115)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000 == Mask.encode(:v6, 116)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000 == Mask.encode(:v6, 117)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000 == Mask.encode(:v6, 118)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000 == Mask.encode(:v6, 119)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000 == Mask.encode(:v6, 120)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000 == Mask.encode(:v6, 121)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000 == Mask.encode(:v6, 122)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000 == Mask.encode(:v6, 123)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000 == Mask.encode(:v6, 124)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000 == Mask.encode(:v6, 125)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100 == Mask.encode(:v6, 126)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110 == Mask.encode(:v6, 127)
      assert 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 == Mask.encode(:v6, 128)
    end

    test "decode/1" do
      for mask <- 0..128 do
        assert Mask.decode(:v6, Mask.encode(:v6, mask)) == mask
      end
    end

    test "parse/1" do
      assert {:ok, 0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000} = Mask.parse(:v6, "0")
      assert {:ok, 0b11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000} = Mask.parse(:v6, "64")
      assert {:ok, 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111} = Mask.parse(:v6, "128")

      assert {:error, _} = Mask.parse(:v6, "-1")
      assert {:error, _} = Mask.parse(:v6, "not a mask")
      assert {:error, _} = Mask.parse(:v6, "129")
    end

    test "parse!/1" do
      {:ok, success} = Mask.parse(:v6, "92")
      assert Mask.parse!(:v6, "92") == success

      {:error, error} = Mask.parse(:v6, "error")
      assert_raise ArgumentError, error, fn -> Mask.parse!(:v6, "error") end
    end
  end
end
